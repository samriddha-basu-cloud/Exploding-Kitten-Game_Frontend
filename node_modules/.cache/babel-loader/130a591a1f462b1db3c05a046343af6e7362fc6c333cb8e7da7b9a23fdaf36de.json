{"ast":null,"code":"var _jsxFileName = \"/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [points, setPoints] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [userPoints, setUserPoints] = useState(0);\n  const [cards, setCards] = useState([{\n    type: 'cat'\n  }, {\n    type: 'cat'\n  }, {\n    type: 'defuse'\n  }, {\n    type: 'shuffle'\n  }, {\n    type: 'exploding'\n  }]);\n  const [defuseCounter, setDefuseCounter] = useState(0);\n  useEffect(() => {\n    // Fetch user points when the component mounts\n    const fetchUserPoints = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/user/points?name=${userName}`);\n        setUserPoints(response.data);\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n    if (userName) {\n      fetchUserPoints();\n    }\n  }, [userName]);\n  const handleNameSubmit = name => {\n    setUserName(name);\n    setGameStarted(true); // Set gameStarted to true once the user submits the name\n  };\n  const handleCardFlip = cardType => {\n    let remainingCards = [...cards];\n    let newToastMessage = '';\n    let newPoints = points;\n    let newDefuseCounter = defuseCounter;\n    switch (cardType) {\n      case 'cat':\n        remainingCards = remainingCards.filter(card => card.type !== 'cat');\n        newToastMessage = 'You drew a cat card!';\n        break;\n      case 'defuse':\n        remainingCards = remainingCards.filter(card => card.type !== 'defuse');\n        newDefuseCounter++;\n        newToastMessage = 'You drew a defuse card!';\n        break;\n      case 'exploding':\n        if (defuseCounter > 0) {\n          newDefuseCounter--;\n          remainingCards = remainingCards.filter(card => card.type !== 'exploding');\n          newToastMessage = 'You defused an exploding kitten!';\n        } else {\n          setGameStarted(false);\n          newToastMessage = 'Game Over! You drew an exploding kitten.';\n          remainingCards = [{\n            type: 'cat'\n          }, {\n            type: 'cat'\n          }, {\n            type: 'defuse'\n          }, {\n            type: 'shuffle'\n          }, {\n            type: 'exploding'\n          }];\n          newPoints = 0;\n          newDefuseCounter = 0;\n          setPoints(0);\n          setDefuseCounter(0);\n        }\n        break;\n      case 'shuffle':\n        remainingCards = [{\n          type: 'cat'\n        }, {\n          type: 'cat'\n        }, {\n          type: 'defuse'\n        }, {\n          type: 'shuffle'\n        }, {\n          type: 'exploding'\n        }];\n        newDefuseCounter = 0;\n        newToastMessage = 'Game restarted! You drew a shuffle card.';\n        break;\n      default:\n        newToastMessage = 'Card drawn successfully!';\n        break;\n    }\n    setCards(remainingCards);\n    setToastMessage(newToastMessage);\n    setDefuseCounter(newDefuseCounter);\n\n    // If all cards are drawn, increase user points\n    if (remainingCards.length === 0) {\n      setPoints(points + 1);\n      setToastMessage('Congratulations! You won the game!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        userName: userName,\n        userPoints: userPoints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(CardBlock, {\n          userName: userName,\n          onCardFlip: () => handleCardFlip(card.type)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), toastMessage && /*#__PURE__*/_jsxDEV(Toast, {\n        message: toastMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(NameForm, {\n      onNameSubmit: handleNameSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"obvEdZaJV7rUzN0RCc2B+srJX1Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","CardBlock","Toast","NameForm","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","points","setPoints","toastMessage","setToastMessage","userName","setUserName","gameStarted","setGameStarted","userPoints","setUserPoints","cards","setCards","type","defuseCounter","setDefuseCounter","fetchUserPoints","response","get","data","error","console","handleNameSubmit","name","handleCardFlip","cardType","remainingCards","newToastMessage","newPoints","newDefuseCounter","filter","card","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onCardFlip","message","onNameSubmit","_c","$RefreshReg$"],"sources":["/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport axios from 'axios';\n\nfunction App() {\n  const [points, setPoints] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [userPoints, setUserPoints] = useState(0);\n  const [cards, setCards] = useState([\n    { type: 'cat' },\n    { type: 'cat' },\n    { type: 'defuse' },\n    { type: 'shuffle' },\n    { type: 'exploding' }\n  ]);\n  const [defuseCounter, setDefuseCounter] = useState(0);\n\n  useEffect(() => {\n    // Fetch user points when the component mounts\n    const fetchUserPoints = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/user/points?name=${userName}`);\n        setUserPoints(response.data);\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n\n    if (userName) {\n      fetchUserPoints();\n    }\n  }, [userName]);\n\n  const handleNameSubmit = (name) => {\n    setUserName(name);\n    setGameStarted(true); // Set gameStarted to true once the user submits the name\n  };\n\n  const handleCardFlip = (cardType) => {\n    let remainingCards = [...cards];\n    let newToastMessage = '';\n    let newPoints = points;\n    let newDefuseCounter = defuseCounter;\n\n    switch (cardType) {\n      case 'cat':\n        remainingCards = remainingCards.filter(card => card.type !== 'cat');\n        newToastMessage = 'You drew a cat card!';\n        break;\n      case 'defuse':\n        remainingCards = remainingCards.filter(card => card.type !== 'defuse');\n        newDefuseCounter++;\n        newToastMessage = 'You drew a defuse card!';\n        break;\n      case 'exploding':\n        if (defuseCounter > 0) {\n          newDefuseCounter--;\n          remainingCards = remainingCards.filter(card => card.type !== 'exploding');\n          newToastMessage = 'You defused an exploding kitten!';\n        } else {\n          setGameStarted(false);\n          newToastMessage = 'Game Over! You drew an exploding kitten.';\n          remainingCards = [\n            { type: 'cat' },\n            { type: 'cat' },\n            { type: 'defuse' },\n            { type: 'shuffle' },\n            { type: 'exploding' }\n          ];\n          newPoints = 0;\n          newDefuseCounter = 0;\n          setPoints(0);\n          setDefuseCounter(0);\n        }\n        break;\n      case 'shuffle':\n        remainingCards = [\n          { type: 'cat' },\n          { type: 'cat' },\n          { type: 'defuse' },\n          { type: 'shuffle' },\n          { type: 'exploding' }\n        ];\n        newDefuseCounter = 0;\n        newToastMessage = 'Game restarted! You drew a shuffle card.';\n        break;\n      default:\n        newToastMessage = 'Card drawn successfully!';\n        break;\n    }\n\n    setCards(remainingCards);\n    setToastMessage(newToastMessage);\n    setDefuseCounter(newDefuseCounter);\n\n    // If all cards are drawn, increase user points\n    if (remainingCards.length === 0) {\n      setPoints(points + 1);\n      setToastMessage('Congratulations! You won the game!');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {gameStarted ? (\n        <>\n          <Navbar userName={userName} userPoints={userPoints} />\n          <div className=\"card-container\">\n            {cards.map((card, index) => (\n              <CardBlock key={index} userName={userName} onCardFlip={() => handleCardFlip(card.type)} />\n            ))}\n          </div>\n          {toastMessage && <Toast message={toastMessage} />}\n        </>\n      ) : (\n        <NameForm onNameSubmit={handleNameSubmit} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}