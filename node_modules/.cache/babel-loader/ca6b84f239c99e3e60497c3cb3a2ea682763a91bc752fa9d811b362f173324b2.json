{"ast":null,"code":"var _jsxFileName = \"/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens/src/components/CardBlock.js\",\n  _s = $RefreshSig$();\n// CardBlock.js\nimport React, { useState } from 'react';\nimport cat1 from '../assets/cat1.png';\nimport cat2 from '../assets/cat2.png';\nimport cat3 from '../assets/cat3.png';\nimport cat4 from '../assets/cat4.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardBlock({\n  onCardFlip\n}) {\n  _s();\n  const [flipped, setFlipped] = useState(false);\n  const [cardType, setCardType] = useState('');\n  const handleClick = () => {\n    if (!flipped) {\n      setFlipped(true);\n      // Generate random card type (for demonstration purpose)\n      const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n      const randomCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];\n      setCardType(randomCardType);\n      onCardFlip(randomCardType);\n    }\n  };\n  const getBackImage = () => {\n    switch (cardType) {\n      case 'cat':\n        return cat1;\n      case 'defuse':\n        return cat2;\n      case 'shuffle':\n        return cat3;\n      case 'exploding':\n        return cat4;\n      default:\n        return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `card-block ${flipped ? 'flipped' : ''}`,\n    onClick: handleClick,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      style: {\n        backgroundImage: `url(${getBackImage()})`,\n        backgroundSize: 'cover'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(CardBlock, \"dWDkTge9t68CMkwerSsbfHkbBEg=\");\n_c = CardBlock;\nexport default CardBlock;\nvar _c;\n$RefreshReg$(_c, \"CardBlock\");","map":{"version":3,"names":["React","useState","cat1","cat2","cat3","cat4","jsxDEV","_jsxDEV","CardBlock","onCardFlip","_s","flipped","setFlipped","cardType","setCardType","handleClick","cardTypes","randomCardType","Math","floor","random","length","getBackImage","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundImage","backgroundSize","_c","$RefreshReg$"],"sources":["/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens/src/components/CardBlock.js"],"sourcesContent":["// CardBlock.js\nimport React, { useState } from 'react';\nimport cat1 from '../assets/cat1.png';\nimport cat2 from '../assets/cat2.png';\nimport cat3 from '../assets/cat3.png';\nimport cat4 from '../assets/cat4.png';\n\nfunction CardBlock({ onCardFlip }) {\n  const [flipped, setFlipped] = useState(false);\n  const [cardType, setCardType] = useState('');\n\n  const handleClick = () => {\n    if (!flipped) {\n      setFlipped(true);\n      // Generate random card type (for demonstration purpose)\n      const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n      const randomCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];\n      setCardType(randomCardType);\n      onCardFlip(randomCardType);\n    }\n  };\n\n  const getBackImage = () => {\n    switch (cardType) {\n      case 'cat':\n        return cat1;\n      case 'defuse':\n        return cat2;\n      case 'shuffle':\n        return cat3;\n      case 'exploding':\n        return cat4;\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className={`card-block ${flipped ? 'flipped' : ''}`} onClick={handleClick}>\n      <div className=\"card-front\"></div>\n      <div className=\"card-back\" style={{ backgroundImage: `url(${getBackImage()})`, backgroundSize: 'cover' }}></div>\n    </div>\n  );\n}\n\nexport default CardBlock;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,IAAI,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,SAASA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMc,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACJ,OAAO,EAAE;MACZC,UAAU,CAAC,IAAI,CAAC;MAChB;MACA,MAAMI,SAAS,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,CAAC;MAC3D,MAAMC,cAAc,GAAGD,SAAS,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,SAAS,CAACK,MAAM,CAAC,CAAC;MAC9EP,WAAW,CAACG,cAAc,CAAC;MAC3BR,UAAU,CAACQ,cAAc,CAAC;IAC5B;EACF,CAAC;EAED,MAAMK,YAAY,GAAGA,CAAA,KAAM;IACzB,QAAQT,QAAQ;MACd,KAAK,KAAK;QACR,OAAOX,IAAI;MACb,KAAK,QAAQ;QACX,OAAOC,IAAI;MACb,KAAK,SAAS;QACZ,OAAOC,IAAI;MACb,KAAK,WAAW;QACd,OAAOC,IAAI;MACb;QACE,OAAO,EAAE;IACb;EACF,CAAC;EAED,oBACEE,OAAA;IAAKgB,SAAS,EAAG,cAAaZ,OAAO,GAAG,SAAS,GAAG,EAAG,EAAE;IAACa,OAAO,EAAET,WAAY;IAAAU,QAAA,gBAC7ElB,OAAA;MAAKgB,SAAS,EAAC;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAClCtB,OAAA;MAAKgB,SAAS,EAAC,WAAW;MAACO,KAAK,EAAE;QAAEC,eAAe,EAAG,OAAMT,YAAY,CAAC,CAAE,GAAE;QAAEU,cAAc,EAAE;MAAQ;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7G,CAAC;AAEV;AAACnB,EAAA,CApCQF,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AAsClB,eAAeA,SAAS;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}