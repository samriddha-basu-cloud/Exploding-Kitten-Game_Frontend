{"ast":null,"code":"var _jsxFileName = \"/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [points, setPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n  useEffect(() => {\n    if (gameStarted) {\n      generateCards();\n    }\n  }, [gameStarted]);\n  useEffect(() => {\n    // Initialize flipped state for all cards\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    const newCards = Array.from({\n      length: 5\n    }, () => {\n      return cardTypes[Math.floor(Math.random() * cardTypes.length)];\n    });\n    setCards(newCards);\n  };\n  const handleNameSubmit = name => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n  const handleCardFlip = (index, cardType) => {\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          console.log(\"Count is\" + count);\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCards(newCards); // Refill the array with 5 new cards\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          break;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            console.log(\"Count is\" + count);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false); // Exit the game\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n          // Push a point to the database against the particular username\n          // You can implement this logic as per your database structure\n          break;\n      }\n      const newCards = [...cards];\n      newCards.splice(index, 1); // Remove the card from the array\n      setCards(newCards);\n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true; // Flip the removed card\n      setFlippedArray(newFlippedArray);\n    }, 700); // Wait for 0.7 seconds before removing the card\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        points: points,\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(CardBlock, {\n          cardType: card,\n          index: index,\n          onCardFlip: handleCardFlip,\n          flippedArray: flippedArray\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), toastMessage && /*#__PURE__*/_jsxDEV(Toast, {\n        message: toastMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(NameForm, {\n      onNameSubmit: handleNameSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oz5dLGZV7FlqyVEnZSsCmYuPppU=\");\n_c = App;\nexport default App;\n\n// cat -> Agey badho\n// defuse -> count ++ && Agey badho\n// explode -> count>0? count -- && Agey badho : game over\n//shuffle -> array redefine\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","CardBlock","Toast","NameForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","points","setPoints","count","setCount","toastMessage","setToastMessage","userName","setUserName","gameStarted","setGameStarted","cards","setCards","flippedArray","setFlippedArray","generateCards","Array","length","fill","cardTypes","newCards","from","Math","floor","random","handleNameSubmit","name","handleCardFlip","index","cardType","setTimeout","console","log","splice","newFlippedArray","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","onCardFlip","message","onNameSubmit","_c","$RefreshReg$"],"sources":["/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\n\nfunction App() {\n  const [points, setPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n\n  useEffect(() => {\n    if (gameStarted) {\n      generateCards();\n    }\n  }, [gameStarted]);\n\n  useEffect(() => {\n    // Initialize flipped state for all cards\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    const newCards = Array.from({ length: 5 }, () => {\n      return cardTypes[Math.floor(Math.random() * cardTypes.length)];\n    });\n    setCards(newCards);\n  };\n\n  const handleNameSubmit = (name) => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n\n  const handleCardFlip = (index, cardType) => {\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          console.log(\"Count is\" +count);\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCards(newCards); // Refill the array with 5 new cards\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          break;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            console.log(\"Count is\" +count);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false); // Exit the game\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n          // Push a point to the database against the particular username\n          // You can implement this logic as per your database structure\n          break;\n      }\n  \n      const newCards = [...cards];\n      newCards.splice(index, 1); // Remove the card from the array\n      setCards(newCards);\n  \n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true; // Flip the removed card\n      setFlippedArray(newFlippedArray);\n    }, 700); // Wait for 0.7 seconds before removing the card\n  };\n  \n\n  return (\n    <div className=\"App\">\n      {gameStarted ? (\n        <>\n          <Navbar points={points} userName={userName}/>\n          <div className=\"card-container\">\n            {cards.map((card, index) => (\n              <CardBlock key={index} cardType={card} index={index} onCardFlip={handleCardFlip} flippedArray={flippedArray} />\n            ))}\n          </div>\n          {toastMessage && <Toast message={toastMessage} />}\n        </>\n      ) : (\n        <NameForm onNameSubmit={handleNameSubmit} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n// cat -> Agey badho\n// defuse -> count ++ && Agey badho\n// explode -> count>0? count -- && Agey badho : game over\n//shuffle -> array redefine"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}