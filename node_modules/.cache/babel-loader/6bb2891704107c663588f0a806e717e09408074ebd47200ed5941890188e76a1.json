{"ast":null,"code":"var _jsxFileName = \"/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport LeaderBoard from './components/LeaderBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [points, setPoints] = useState(0);\n  const [updatedPoints, setUpdatedPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false);\n  useEffect(() => {\n    const fetchUserPoints = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/user/points?name=${userName}`);\n        console.log('Fetching user points for:', userName);\n        if (!response.ok) {\n          console.error('Server responded with status:', response.status);\n          return;\n        }\n        const data = await response.json();\n        console.log('Received user data:', data);\n        setPoints(data); // Since the backend now directly returns points, set it directly\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n    if (gameStarted) {\n      generateCards();\n      fetchUserPoints();\n    }\n  }, [gameStarted, userName]);\n  useEffect(() => {\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    const newCards = Array.from({\n      length: 5\n    }, () => {\n      return cardTypes[Math.floor(Math.random() * cardTypes.length)];\n    });\n    setCards(newCards);\n  };\n  const handleNameSubmit = name => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n  const handleCardFlip = (index, cardType) => {\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCount(0);\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          generateCards();\n          return;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false);\n            window.location.reload();\n            // setAllCardsDrawn(true); // Set allCardsDrawn to true\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n          // You can implement database interaction logic here\n          break;\n      }\n      const newCards = [...cards];\n      newCards.splice(index, 1);\n      setCards(newCards);\n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true;\n      setFlippedArray(newFlippedArray);\n\n      // Check if all cards are drawn\n      if (newCards.length === 0) {\n        setAllCardsDrawn(true);\n      }\n    }, 700);\n  };\n  useEffect(() => {\n    const updateUserPoints = async () => {\n      try {\n        await fetch('http://localhost:8080/api/user/points', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: userName\n          })\n        });\n      } catch (error) {\n        console.error('Error updating user points:', error);\n      }\n    };\n    if (allCardsDrawn) {\n      updateUserPoints();\n    }\n  }, [allCardsDrawn, userName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        points: points,\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(CardBlock, {\n          cardType: card,\n          index: index,\n          onCardFlip: handleCardFlip,\n          flippedArray: flippedArray\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), toastMessage && /*#__PURE__*/_jsxDEV(Toast, {\n        message: toastMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(NameForm, {\n        onNameSubmit: handleNameSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), allCardsDrawn && /*#__PURE__*/_jsxDEV(LeaderBoard, {\n      points: points,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9BQNONokNA6A7R5TYSML+dzU2N4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","CardBlock","Toast","NameForm","LeaderBoard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","points","setPoints","updatedPoints","setUpdatedPoints","count","setCount","toastMessage","setToastMessage","userName","setUserName","gameStarted","setGameStarted","cards","setCards","flippedArray","setFlippedArray","allCardsDrawn","setAllCardsDrawn","fetchUserPoints","response","fetch","console","log","ok","error","status","data","json","generateCards","Array","length","fill","cardTypes","newCards","from","Math","floor","random","handleNameSubmit","name","handleCardFlip","index","cardType","setTimeout","window","location","reload","splice","newFlippedArray","updateUserPoints","method","headers","body","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","onCardFlip","message","onNameSubmit","_c","$RefreshReg$"],"sources":["/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport LeaderBoard from './components/LeaderBoard';\n\nfunction App() {\n  const [points, setPoints] = useState(0);\n  const [updatedPoints, setUpdatedPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false);\n\n  useEffect(() => {\n    const fetchUserPoints = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/user/points?name=${userName}`);\n        console.log('Fetching user points for:', userName);\n        \n        if (!response.ok) {\n          console.error('Server responded with status:', response.status);\n          return;\n        }\n    \n        const data = await response.json();\n        console.log('Received user data:', data);\n        setPoints(data); // Since the backend now directly returns points, set it directly\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n\n    if (gameStarted) {\n      generateCards();\n      fetchUserPoints();\n    }\n  }, [gameStarted, userName]);\n  \n  \n\n  useEffect(() => {\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    const newCards = Array.from({ length: 5 }, () => {\n      return cardTypes[Math.floor(Math.random() * cardTypes.length)];\n    });\n    setCards(newCards);\n  };\n\n  const handleNameSubmit = (name) => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n\n  const handleCardFlip = (index, cardType) => {\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCount(0);\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          generateCards();\n          return;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false);\n            window.location.reload();\n            // setAllCardsDrawn(true); // Set allCardsDrawn to true\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n          // You can implement database interaction logic here\n          break;\n      }\n\n      const newCards = [...cards];\n      newCards.splice(index, 1);\n      setCards(newCards);\n\n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true;\n      setFlippedArray(newFlippedArray);\n\n      // Check if all cards are drawn\n      if (newCards.length === 0) {\n        setAllCardsDrawn(true);\n      }\n    }, 700);\n  };\n\n\n  useEffect(() => {\n    const updateUserPoints = async () => {\n      try {\n        await fetch('http://localhost:8080/api/user/points', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ name: userName })\n        });\n      } catch (error) {\n        console.error('Error updating user points:', error);\n      }\n    };\n\n    if (allCardsDrawn) {\n      updateUserPoints();\n    }\n  }, [allCardsDrawn, userName]);\n\n\n  return (\n    <div className=\"App\">\n      {gameStarted ? (\n        <>\n          <Navbar points={points} userName={userName} />\n          <div className=\"card-container\">\n            {cards.map((card, index) => (\n              <CardBlock key={index} cardType={card} index={index} onCardFlip={handleCardFlip} flippedArray={flippedArray} />\n            ))}\n          </div>\n          {toastMessage && <Toast message={toastMessage} />}\n        </>\n      ) : (\n        <>\n          <NameForm onNameSubmit={handleNameSubmit} />\n        </>\n      )}\n      {allCardsDrawn && <LeaderBoard points={points} userName={userName} />}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}