{"ast":null,"code":"var _jsxFileName = \"/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport LeaderBoard from './components/LeaderBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [points, setPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false);\n  useEffect(() => {\n    const fetchUserPoints = async () => {\n      try {\n        const response = await fetch(`/api/user/points?name=${userName}`);\n        console.log('Fetching user points for:', userName);\n        const data = await response.json();\n        console.log('Received user data:', data); // Add this line for debugging\n        setPoints(data);\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n    if (gameStarted) {\n      generateCards();\n      fetchUserPoints();\n    }\n  }, [gameStarted, userName]);\n  useEffect(() => {\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    const newCards = Array.from({\n      length: 5\n    }, () => {\n      return cardTypes[Math.floor(Math.random() * cardTypes.length)];\n    });\n    setCards(newCards);\n  };\n  const handleNameSubmit = name => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n  const handleCardFlip = (index, cardType) => {\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCount(0);\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          generateCards();\n          return;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false);\n            window.location.reload();\n            // setAllCardsDrawn(true); // Set allCardsDrawn to true\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n          // You can implement database interaction logic here\n          break;\n      }\n      const newCards = [...cards];\n      newCards.splice(index, 1);\n      setCards(newCards);\n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true;\n      setFlippedArray(newFlippedArray);\n\n      // Check if all cards are drawn\n      if (newCards.length === 0) {\n        setAllCardsDrawn(true);\n        updateUserPoints(); // Update user points when all cards are drawn\n      }\n    }, 700);\n  };\n  const updateUserPoints = async () => {\n    try {\n      const updatedPoints = points + 1;\n      await fetch('/api/user/points', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: userName,\n          points: updatedPoints\n        })\n      });\n      setPoints(updatedPoints); // Update points state after updating points in the backend\n    } catch (error) {\n      console.error('Error updating user points:', error);\n    }\n  };\n  useEffect(() => {\n    if (allCardsDrawn) {\n      updateUserPoints();\n    }\n  }, [allCardsDrawn]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        points: points,\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(CardBlock, {\n          cardType: card,\n          index: index,\n          onCardFlip: handleCardFlip,\n          flippedArray: flippedArray\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), toastMessage && /*#__PURE__*/_jsxDEV(Toast, {\n        message: toastMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(NameForm, {\n        onNameSubmit: handleNameSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), allCardsDrawn && /*#__PURE__*/_jsxDEV(LeaderBoard, {\n      points: points,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZQXqamrbnO/WGtNmiroL+zO3mzo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","CardBlock","Toast","NameForm","LeaderBoard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","points","setPoints","count","setCount","toastMessage","setToastMessage","userName","setUserName","gameStarted","setGameStarted","cards","setCards","flippedArray","setFlippedArray","allCardsDrawn","setAllCardsDrawn","fetchUserPoints","response","fetch","console","log","data","json","error","generateCards","Array","length","fill","cardTypes","newCards","from","Math","floor","random","handleNameSubmit","name","handleCardFlip","index","cardType","setTimeout","window","location","reload","splice","newFlippedArray","updateUserPoints","updatedPoints","method","headers","body","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","onCardFlip","message","onNameSubmit","_c","$RefreshReg$"],"sources":["/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport LeaderBoard from './components/LeaderBoard';\n\nfunction App() {\n  const [points, setPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false);\n\n  useEffect(() => {\n    const fetchUserPoints = async () => {\n      try {\n        const response = await fetch(`/api/user/points?name=${userName}`);\n        console.log('Fetching user points for:', userName);\n        const data = await response.json();\n        console.log('Received user data:', data); // Add this line for debugging\n        setPoints(data);\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n  \n    if (gameStarted) {\n      generateCards();\n      fetchUserPoints();\n    }\n  }, [gameStarted, userName]);\n  \n  \n\n  useEffect(() => {\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    const newCards = Array.from({ length: 5 }, () => {\n      return cardTypes[Math.floor(Math.random() * cardTypes.length)];\n    });\n    setCards(newCards);\n  };\n\n  const handleNameSubmit = (name) => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n\n  const handleCardFlip = (index, cardType) => {\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCount(0);\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          generateCards();\n          return;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false);\n            window.location.reload();\n            // setAllCardsDrawn(true); // Set allCardsDrawn to true\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n          // You can implement database interaction logic here\n          break;\n      }\n\n      const newCards = [...cards];\n      newCards.splice(index, 1);\n      setCards(newCards);\n\n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true;\n      setFlippedArray(newFlippedArray);\n\n      // Check if all cards are drawn\n      if (newCards.length === 0) {\n        setAllCardsDrawn(true);\n        updateUserPoints(); // Update user points when all cards are drawn\n      }\n    }, 700);\n  };\n\n  const updateUserPoints = async () => {\n    try {\n      const updatedPoints = points + 1;\n      await fetch('/api/user/points', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ name: userName, points: updatedPoints })\n      });\n      setPoints(updatedPoints); // Update points state after updating points in the backend\n    } catch (error) {\n      console.error('Error updating user points:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (allCardsDrawn) {\n      updateUserPoints();\n    }\n  }, [allCardsDrawn]);\n\n  return (\n    <div className=\"App\">\n      {gameStarted ? (\n        <>\n          <Navbar points={points} userName={userName} />\n          <div className=\"card-container\">\n            {cards.map((card, index) => (\n              <CardBlock key={index} cardType={card} index={index} onCardFlip={handleCardFlip} flippedArray={flippedArray} />\n            ))}\n          </div>\n          {toastMessage && <Toast message={toastMessage} />}\n        </>\n      ) : (\n        <>\n          <NameForm onNameSubmit={handleNameSubmit} />\n        </>\n      )}\n      {allCardsDrawn && <LeaderBoard points={points} userName={userName} />}\n    </div>\n  );\n}\n\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}