{"ast":null,"code":"var _jsxFileName = \"/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport LeaderBoard from './components/LeaderBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [points, setPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false); // State variable to track if all cards are drawn\n\n  useEffect(() => {\n    const fetchUserPoints = async () => {\n      try {\n        const response = await fetch(`/api/user/data?name=${userName}`);\n        const data = await response.json();\n        setPoints(parseInt(data.points)); // Parse points as integer\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n    if (gameStarted) {\n      generateCards();\n      fetchUserPoints(); // Fetch user points when the game starts\n    }\n  }, [gameStarted, userName]);\n  useEffect(() => {\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    const newCards = Array.from({\n      length: 5\n    }, () => {\n      return cardTypes[Math.floor(Math.random() * cardTypes.length)];\n    });\n    setCards(newCards);\n  };\n  const handleNameSubmit = name => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n  const handleCardFlip = (index, cardType) => {\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCount(0);\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          generateCards();\n          return;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false);\n            window.location.reload();\n            // setAllCardsDrawn(true); // Set allCardsDrawn to true\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n          // You can implement database interaction logic here\n          break;\n      }\n      const newCards = [...cards];\n      newCards.splice(index, 1);\n      setCards(newCards);\n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true;\n      setFlippedArray(newFlippedArray);\n\n      // Check if all cards are drawn\n      if (newCards.length === 0) {\n        setAllCardsDrawn(true);\n        updateUserPoints(); // Update user points when all cards are drawn\n      }\n    }, 700);\n  };\n  const updateUserPoints = () => {\n    const updatedPoints = points + 1; // Increment user points by 1\n    fetch('/api/user/points', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: userName,\n        points: updatedPoints\n      })\n    }).then(response => {\n      if (response.ok) {\n        setPoints(updatedPoints); // Update points in the frontend\n      } else {\n        console.error('Failed to update user points');\n      }\n    }).catch(error => {\n      console.error('Error updating user points:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        points: points,\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(CardBlock, {\n          cardType: card,\n          index: index,\n          onCardFlip: handleCardFlip,\n          flippedArray: flippedArray\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 27\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 19\n      }, this), toastMessage && /*#__PURE__*/_jsxDEV(Toast, {\n        message: toastMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(NameForm, {\n        onNameSubmit: handleNameSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }, this)\n    }, void 0, false), allCardsDrawn && /*#__PURE__*/_jsxDEV(LeaderBoard, {\n      points: points,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 29\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"MvezorZ70COoFzEFmYJTRN2nRT4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Navbar","CardBlock","Toast","NameForm","LeaderBoard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","points","setPoints","count","setCount","toastMessage","setToastMessage","userName","setUserName","gameStarted","setGameStarted","cards","setCards","flippedArray","setFlippedArray","allCardsDrawn","setAllCardsDrawn","fetchUserPoints","response","fetch","data","json","parseInt","error","console","generateCards","Array","length","fill","cardTypes","newCards","from","Math","floor","random","handleNameSubmit","name","handleCardFlip","index","cardType","setTimeout","window","location","reload","splice","newFlippedArray","updateUserPoints","updatedPoints","method","headers","body","JSON","stringify","then","ok","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","onCardFlip","message","onNameSubmit","_c","$RefreshReg$"],"sources":["/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport LeaderBoard from './components/LeaderBoard';\n\nfunction App() {\n  const [points, setPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false); // State variable to track if all cards are drawn\n\n  useEffect(() => {\n    const fetchUserPoints = async () => {\n      try {\n        const response = await fetch(`/api/user/data?name=${userName}`);\n        const data = await response.json();\n        setPoints(parseInt(data.points)); // Parse points as integer\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n\n    if (gameStarted) {\n      generateCards();\n      fetchUserPoints(); // Fetch user points when the game starts\n    }\n  }, [gameStarted, userName]);\n\n  useEffect(() => {\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    const newCards = Array.from({ length: 5 }, () => {\n      return cardTypes[Math.floor(Math.random() * cardTypes.length)];\n    });\n    setCards(newCards);\n  };\n\n  const handleNameSubmit = (name) => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n\n\n  const handleCardFlip = (index, cardType) => {\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCount(0);\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          generateCards();\n          return;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false);\n            window.location.reload();\n            // setAllCardsDrawn(true); // Set allCardsDrawn to true\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n          // You can implement database interaction logic here\n          break;\n      }\n\n      const newCards = [...cards];\n      newCards.splice(index, 1);\n      setCards(newCards);\n\n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true;\n      setFlippedArray(newFlippedArray);\n\n      // Check if all cards are drawn\n      if (newCards.length === 0) {\n        setAllCardsDrawn(true);\n        updateUserPoints(); // Update user points when all cards are drawn\n      }\n    }, 700);\n  };\n\n\n\n    const updateUserPoints = () => {\n        const updatedPoints = points + 1; // Increment user points by 1\n        fetch('/api/user/points', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ name: userName, points: updatedPoints })\n        })\n        .then(response => {\n            if (response.ok) {\n                setPoints(updatedPoints); // Update points in the frontend\n            } else {\n                console.error('Failed to update user points');\n            }\n        })\n        .catch(error => {\n            console.error('Error updating user points:', error);\n        });\n    };\n\n    return (\n      <div className=\"App\">\n          {gameStarted ? (\n              <>\n                  <Navbar points={points} userName={userName}/>\n                  <div className=\"card-container\">\n                      {cards.map((card, index) => (\n                          <CardBlock key={index} cardType={card} index={index} onCardFlip={handleCardFlip} flippedArray={flippedArray} />\n                      ))}\n                  </div>\n                  {toastMessage && <Toast message={toastMessage} />}\n              </>\n          ) : (\n              <>\n                  <NameForm onNameSubmit={handleNameSubmit} />\n              </>\n          )}\n          {allCardsDrawn && <LeaderBoard points={points} userName={userName} />} {/* Render LeaderBoard only when all cards are drawn */}\n      </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}