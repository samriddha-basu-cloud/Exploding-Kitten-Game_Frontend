{"ast":null,"code":"var _jsxFileName = \"/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [points, setPoints] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [userPoints, setUserPoints] = useState(0);\n  const [deck, setDeck] = useState(['cat', 'cat', 'cat', 'cat', 'cat']); // Initial deck with 5 cat cards\n  const [counter, setCounter] = useState(0); // Counter for defuse cards\n\n  useEffect(() => {\n    // Fetch user points when the component mounts\n    const fetchUserPoints = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/user/points?name=${userName}`);\n        setUserPoints(response.data);\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n    if (userName) {\n      fetchUserPoints();\n    }\n  }, [userName]);\n  const handleNameSubmit = name => {\n    setUserName(name);\n    setGameStarted(true); // Set gameStarted to true once the user submits the name\n  };\n  const handleCardFlip = cardType => {\n    switch (cardType) {\n      case 'cat':\n        // If it's a cat card, remove one card from the deck\n        if (deck.length === 1) {\n          // If all cards are exhausted, increment user points\n          setPoints(points + 1);\n          setToastMessage('Congratulations! You won!');\n          setUserPoints(userPoints + 1); // Increment user points in the database\n          setDeck(['cat', 'cat', 'cat', 'cat', 'cat']); // Reset the deck\n          setCounter(0); // Reset the counter\n        } else {\n          setDeck(deck.slice(0, deck.length - 1)); // Remove one card from the deck\n          setToastMessage('You drew a cat card.');\n        }\n        break;\n      case 'defuse':\n        // If it's a defuse card, decrement one card from the deck and increment the counter\n        setDeck(deck.slice(0, deck.length - 1)); // Remove one card from the deck\n        setCounter(counter + 1); // Increment the counter\n        setToastMessage('You drew a defuse card.');\n        break;\n      case 'exploding':\n        // If it's an exploding card, end the game if the counter is 0, else decrement one card from the deck\n        if (counter === 0) {\n          setToastMessage('Game Over! You drew an exploding kitten.');\n          setGameStarted(false); // End the game\n        } else {\n          setDeck(deck.slice(0, deck.length - 1)); // Remove one card from the deck\n          setCounter(counter - 1); // Decrement the counter\n          setToastMessage('You drew an exploding kitten, but you have a defuse card!');\n        }\n        break;\n      case 'shuffle':\n        // If it's a shuffle card, reset the deck and counter\n        setDeck(['cat', 'cat', 'cat', 'cat', 'cat']); // Reset the deck\n        setCounter(0); // Reset the counter\n        setToastMessage('You drew a shuffle card. The game has been restarted.');\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        userName: userName,\n        userPoints: userPoints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: deck.map((cardType, index) => /*#__PURE__*/_jsxDEV(CardBlock, {\n          userName: userName,\n          onCardFlip: handleCardFlip\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), toastMessage && /*#__PURE__*/_jsxDEV(Toast, {\n        message: toastMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(NameForm, {\n      onNameSubmit: handleNameSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZpRxYbYd8CMt+sS+zxZf23jQ0Nw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","CardBlock","Toast","NameForm","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","points","setPoints","toastMessage","setToastMessage","userName","setUserName","gameStarted","setGameStarted","userPoints","setUserPoints","deck","setDeck","counter","setCounter","fetchUserPoints","response","get","data","error","console","handleNameSubmit","name","handleCardFlip","cardType","length","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onCardFlip","message","onNameSubmit","_c","$RefreshReg$"],"sources":["/Users/samriddha_basu/Desktop/Exploding Kitten game/Exploding Kitten Frontend/exploding-kittens-frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport axios from 'axios';\n\nfunction App() {\n  const [points, setPoints] = useState(0);\n  const [toastMessage, setToastMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [userPoints, setUserPoints] = useState(0);\n  const [deck, setDeck] = useState(['cat', 'cat', 'cat', 'cat', 'cat']); // Initial deck with 5 cat cards\n  const [counter, setCounter] = useState(0); // Counter for defuse cards\n\n  useEffect(() => {\n    // Fetch user points when the component mounts\n    const fetchUserPoints = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/user/points?name=${userName}`);\n        setUserPoints(response.data);\n      } catch (error) {\n        console.error('Error fetching user points:', error);\n      }\n    };\n\n    if (userName) {\n      fetchUserPoints();\n    }\n  }, [userName]);\n\n  const handleNameSubmit = (name) => {\n    setUserName(name);\n    setGameStarted(true); // Set gameStarted to true once the user submits the name\n  };\n\n  const handleCardFlip = (cardType) => {\n    switch (cardType) {\n      case 'cat':\n        // If it's a cat card, remove one card from the deck\n        if (deck.length === 1) {\n          // If all cards are exhausted, increment user points\n          setPoints(points + 1);\n          setToastMessage('Congratulations! You won!');\n          setUserPoints(userPoints + 1); // Increment user points in the database\n          setDeck(['cat', 'cat', 'cat', 'cat', 'cat']); // Reset the deck\n          setCounter(0); // Reset the counter\n        } else {\n          setDeck(deck.slice(0, deck.length - 1)); // Remove one card from the deck\n          setToastMessage('You drew a cat card.');\n        }\n        break;\n      case 'defuse':\n        // If it's a defuse card, decrement one card from the deck and increment the counter\n        setDeck(deck.slice(0, deck.length - 1)); // Remove one card from the deck\n        setCounter(counter + 1); // Increment the counter\n        setToastMessage('You drew a defuse card.');\n        break;\n      case 'exploding':\n        // If it's an exploding card, end the game if the counter is 0, else decrement one card from the deck\n        if (counter === 0) {\n          setToastMessage('Game Over! You drew an exploding kitten.');\n          setGameStarted(false); // End the game\n        } else {\n          setDeck(deck.slice(0, deck.length - 1)); // Remove one card from the deck\n          setCounter(counter - 1); // Decrement the counter\n          setToastMessage('You drew an exploding kitten, but you have a defuse card!');\n        }\n        break;\n      case 'shuffle':\n        // If it's a shuffle card, reset the deck and counter\n        setDeck(['cat', 'cat', 'cat', 'cat', 'cat']); // Reset the deck\n        setCounter(0); // Reset the counter\n        setToastMessage('You drew a shuffle card. The game has been restarted.');\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {gameStarted ? (\n        <>\n          <Navbar userName={userName} userPoints={userPoints} />\n          <div className=\"card-container\">\n            {deck.map((cardType, index) => (\n              <CardBlock key={index} userName={userName} onCardFlip={handleCardFlip} />\n            ))}\n          </div>\n          {toastMessage && <Toast message={toastMessage} />}\n        </>\n      ) : (\n        <NameForm onNameSubmit={handleNameSubmit} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}